# Test PostgreSQL-compatible JSON functions

# First create a test table with sample data
statement ok
INSERT INTO otel_logs_and_spans (
    project_id,
    timestamp,
    context___trace_id,
    name,
    duration,
    resource___service___name,
    parent_id,
    start_time,
    events,
    summary,
    context___span_id,
    id,
    date,
    hashes
) VALUES
(
    '00000000-0000-0000-0000-000000000000',
    '2025-08-07T10:00:00Z',
    'trace123',
    'test_span',
    1500,
    'test_service',
    'parent123',
    '2025-08-07T10:00:00Z',
    '[{"event_name": "start"}, {"event_name": "exception"}]',
    ARRAY['{"status": "ok", "count": 5}'],
    'span123',
    '00000000-0000-0000-0000-000000000001',
    DATE '2025-08-07',
    ARRAY[]::VARCHAR[]
),
(
    '00000000-0000-0000-0000-000000000000',
    '2025-08-07T11:00:00Z',
    'trace456',
    'another_span',
    2500,
    'test_service2',
    'parent456',
    '2025-08-07T11:00:00Z',
    '[{"event_name": "info"}]',
    ARRAY['{"status": "error", "count": 0}'],
    'span456',
    '00000000-0000-0000-0000-000000000002',
    DATE '2025-08-07',
    ARRAY[]::VARCHAR[]
)

# Test json_build_array with simple values
query T
SELECT json_build_array('a', 'b', 'c') FROM otel_logs_and_spans WHERE project_id='00000000-0000-0000-0000-000000000000' LIMIT 1
----
["a","b","c"]

# Test json_build_array with column values
query T
SELECT json_build_array(id, name, duration) FROM otel_logs_and_spans WHERE project_id='00000000-0000-0000-0000-000000000000' ORDER BY timestamp LIMIT 1
----
["00000000-0000-0000-0000-000000000001","test_span",1500]

# Test to_json function
query T
SELECT to_json(summary) FROM otel_logs_and_spans WHERE project_id='00000000-0000-0000-0000-000000000000' ORDER BY timestamp LIMIT 1
----
"[{\"status\": \"ok\", \"count\": 5}]"

# Test to_json with different types
query T
SELECT to_json(duration) FROM otel_logs_and_spans WHERE project_id='00000000-0000-0000-0000-000000000000' ORDER BY timestamp LIMIT 1
----
1500

# Test extract_epoch function
query R
SELECT extract_epoch(timestamp) FROM otel_logs_and_spans WHERE project_id='00000000-0000-0000-0000-000000000000' ORDER BY timestamp LIMIT 1
----
1754557200.0

# Test to_char directly
query T
SELECT to_char(timestamp, 'YYYY-MM-DD"T"HH24:MI:SS') FROM otel_logs_and_spans WHERE project_id='00000000-0000-0000-0000-000000000000' ORDER BY timestamp LIMIT 1
----
2025-08-07T10:00:00

# Test the full complex query (without jsonb_array_elements subquery and AT TIME ZONE)
query T
SELECT json_build_array(
    id,
    to_char(timestamp, 'YYYY-MM-DD"T"HH24:MI:SS.US"Z"'),
    context___trace_id,
    name,
    duration,
    resource___service___name,
    parent_id,
    CAST(extract_epoch(start_time) * 1000000000 AS BIGINT),
    to_json(summary),
    context___span_id
) 
FROM otel_logs_and_spans 
WHERE project_id='00000000-0000-0000-0000-000000000000' 
    AND (timestamp BETWEEN '2025-08-06T15:03:47.380203Z' AND '2025-08-07T15:03:47.380203Z')
ORDER BY timestamp DESC 
LIMIT 2
----
["00000000-0000-0000-0000-000000000002","2025-08-07T11:00:00.000000Z","trace456","another_span",2500,"test_service2","parent456",1754560800000000000,"{\"status\": \"error\", \"count\": 0}","span456"]
["00000000-0000-0000-0000-000000000001","2025-08-07T10:00:00.000000Z","trace123","test_span",1500,"test_service","parent123",1754557200000000000,"{\"status\": \"ok\", \"count\": 5}","span123"]

# Clean up
statement ok
DELETE FROM otel_logs_and_spans WHERE project_id='00000000-0000-0000-0000-000000000000'